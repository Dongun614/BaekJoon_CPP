//url: https://www.acmicpc.net/problem/1080

//문제:
//0과 1로만 이루어진 행렬 A와 행렬 B가 있다. 이때, 행렬 A를 행렬 B로 바꾸는데 필요한 연산의 횟수의 최솟값을 구하는 프로그램을 작성하시오.
//행렬을 변환하는 연산은 어떤 3×3크기의 부분 행렬에 있는 모든 원소를 뒤집는 것이다. (0 → 1, 1 → 0)

//입력:
//첫째 줄에 행렬의 크기 N M이 주어진다. N과 M은 50보다 작거나 같은 자연수이다. 둘째 줄부터 N개의 줄에는 행렬 A가 주어지고, 그 다음줄부터 N개의 줄에는 행렬 B가 주어진다.

//출력:
//첫째 줄에 문제의 정답을 출력한다. 만약 A를 B로 바꿀 수 없다면 -1을 출력한다.

//생각 후 코딩
//1. 사용자에게 첫째 줄을 입력받는다(n,m)
//1.1 이때 n이나 m이 3미만일 경우 -1을 출력하고 프로그램을 종료한다.
//2. 뒤집는건 3x3을 뒤집는건데 그걸 어떻게 할 수 있을까
#include <iostream>

using namespace std;

int main(){
    int n, m;
    cin >> n >> m;
    if(n < 3 || m < 3){
        cout << -1 << endl;
        return 0;
    }

    cout << "okay" << endl;

    return 0;
}